snippet tests "tests table driven"
func Test${1:Name}(t *testing.T) {
	tests := []struct{
		name      string
		input     string
		expected  string
	}{
		{
			input:     "1:8",
			expected: "1",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			output, err := ${2:name(input)}
			require.NoError(t, err)
			assert.Equal(t, tt.expected, output)
		})
	}
}
endsnippet

snippet mapf "map function"
func ${1:mapItems}(items []${2:string}) []${3:string} {
	results := []$3{}
	for _, item := range items {
		res := ${4:mapItem}(item)
		results = append(results, res)
	}
	return results
}
endsnippet

snippet filterf "filter function"
func ${1:filterItems}(items []${2:string}) []$2 {
	results := []$2{}
	for _, item := range items {
		if ${3:filterItem}(item) {
			results = append(results, item)
		}
	}
	return results
}
endsnippet

